
* nbmetadata

Modify Jupyter notebook metadata via cell comments.

For example, a comment like

#+begin_example python
## nbmd:nbmake_skip
#+end_example

will add the =skip-execution= tag from [[https://github.com/treebeardtech/nbmake][nbmake]].

This is useful for notebook clients that cannot add tags or edit metadata (eg.
Emacs). It is also valuable as a user-visible declaration of metadata, instead
of being hidden in the notebook JSON.

* Demo

See [[tests/demo.ipynb][tests/demo.ipynb]] for a demo (which also serves as the test suite).

* Magic comments

Look like

#+begin_example python
## nbmd:nbmake_skip
#+end_example

Where the prefix =nbmd:= is configurable.

=nbmake_skip= is referred to as the ~key~ in this documentation

* Usage

** Command line

The executable is called ~nbmd~:

#+begin_src shell
‚ùØ nbmd --help
Usage: nbmd [OPTIONS] NOTEBOOK_FILE

Arguments:
  NOTEBOOK_FILE  [required]

Options:
  --prefix TEXT         [default: nbmd:]
  --config-file PATH
  --install-completion  Install completion for the current shell.
  --show-completion     Show completion for the current shell, to copy it or
                        customize the installation.
  --help                Show this message and exit.
#+end_src

~nbmd~ ships with the [[src/nbmetadata/config.jsonnet][config]] required for [[https://github.com/treebeardtech/nbmake][nbmake]].

A user config file (in JSON or [[https://jsonnet.org/][Jsonnet]]) can be specified at invocation time, and
it will override/merge with the built-in config.

** Pre-commit hook

~nbmd~ can be used via [[https://pre-commit.com/][pre-commit]] hook:

#+begin_src yaml
repos:
  - repo: https://github.com/indigoviolet/nbmetadata
    rev: master
    hooks:
      - id: nbmetadata
#+end_src

* Config format

We use [[https://jsonnet.org/][Jsonnet]] to store the base configuration and merge it with any
user-specified config. It provides a mapping from ~key~ to the metadata json
that will get merged into the notebook

#+begin_example json
{
  nbmake_raises: {
    tags: ['raises-exception'],
  }
}
#+end_example

* Running tests

This was built to help with https://github.com/treebeardtech/nbmake, so it only
seems right to test it with nbmake and nbmd.

See [[tests/demo.ipynb][tests/demo.ipynb]]

#+begin_src shell
pytest --nbmake tests/demo.ipynb
#+end_src


* Implementation notes

** Removing magic comments

When ~nbmd~ acts on a notebook or cell's metadata, it records the *top-level* keys
that it modified. On future runs, it first clears these keys from the metadata
before re-applying the current magic comments. This has the effect of handling
removals/updates of the comments.

However, since we only track the top-level keys and then blow them away,
modifications to these keys made by other programs will be lost.

In general this should be ok: different applications should namespace and not
collide on the metadata keys they manage, and if they do collide, the "correct"
behavior is not clearly defined.

*** Other options considered:

1. search metadata for all the keys' metadata (that are in the config) and
   remove these if they exist: this is inefficient, hard to "deep unmerge"
2. record the full applied json (instead of just the top-level keys): hard to
   "deep unmerge"
3. wipe _all_ metadata: some keys (for example in top-level metadata,
   ~kernelspec~) need to be preserved
